[project]
name = "danbooru_vandalism_watch"
version = "0.1.0"
description = "A bot that monitors vandalism in a danbooru instance and reports it on discord."
authors = [{ name = "nonamethanks", email = "hellafrickingepic@gmail.com" }]
requires-python = ">=3.13,<3.14"
dependencies = [
    "discord-py (>=2.5.2,<3.0.0)",
    "danboorutools @ git+https://github.com/nonamethanks/danboorutools.git",
]


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.group.dev.dependencies]
ruff = "^0.11.11"
mypy = "^1.15.0"

[tool.poetry]
package-mode = false

[tool.ruff]
target-version = "py311"
line-length = 140
select = ["ALL"]

ignore = [
    "ANN002",  # Missing type annotation for *args
    "ANN003",  # Missing type annotation for **kwargs
    "ANN204",  # missing return type for special methods
    "BLE001",  # catch Exception
    "D",       # docstrings
    "EM101",   # Exception must not use a string literal, assign to variable first
    "EM102",   # Exception must not use an f-string literal
    "ERA001",  # found commented-out code
    "FBT",     # flake8-boolean-trap
    "G004",    # Logging statement uses f-string
    "PLR2004", # allow-magic-value-types
    "PT",      # pytest style
    "RET504",  # Unnecessary variable assignment before `return` statement
    "RET505",  # Unnecessary `else` after `return` statement
    "RET506",  # Unnecessary `else` after `raise` statement
    "RET507",  # Unnecessary `else` after `continue` statement
    "RET508",  # Unnecessary `else` after `break` statement
    "RUF001",  # allowed-confusables
    "RUF003",  # Comment contains ambiguous unicode character
    "RUF012",  # Mutable class attributes should be annotated with `typing.ClassVar`
    "RUF018",  # Avoid assignment expressions in `assert` statements
    "S101",    # assert detected
    "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes # I don't fucking care
    "SIM105",  # Use `contextlib.suppress(KeyError)` instead of try-except-pass
    "SIM114",  # Combine `if` branches using logical `or` operator
    "SLF001",  # Private member accessed
    "T100",    # IPDB Trace used
    "TD002",   # Missing author in TODO,
    "TD003",   # Missing issue link
    "TRY003",  # Avoid specifying long messages outside the exception class
]

[tool.mypy]
check_untyped_defs = true
enable_error_code = "redundant-expr,ignore-without-code"
disable_error_code = "import-untyped"
warn_unused_ignores = true
show_column_numbers = true
show_error_codes = true
strict_equality = true

[tool.poetry.scripts]
bot = "run_bot:main"

[tool.autopep8]
max_line_length = 140
